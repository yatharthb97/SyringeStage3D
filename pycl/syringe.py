"""
Default Configuration for Config bject.
"""
default_seq_file = {
						"units" : "mL",
						"syringe_dia_mL" : 20,
						"no_samples" : 4,
						"repeat" : False,
						"sequences" : {"sequence1" : [0, 0, 0, 0]}
				 	}

def write_cpp(filename, cmd_string):
	"""
	Write CPP command string to file with C or C++ extension.
	"""
	
	if not (filename.endswith(".cpp") or filename.endswith(".c") or filename.endswith(".hpp") or filename.endswith(".h")):
		if not filename.endswith("."):
			filename = filename + '.'

		filename = filename + "cpp"

	with open(filename, 'w') as file:
		file.write(cmd_string)


def create_cpp_resources(config, cpp_file_path, specifiers=""):
	"""
	Generate C++ resources (code lines) from a configuration file.
	"""

	def list_to_cpp_array(lst):

		if isinstance(lst[0], str):
			string = "{"
			for entity in lst[:-1]:
				string += entity
				string += ', '

			#Append last element
			string += lst[-1]

			string += "}"
			return string

		else:
			return "{"+str(lst)[1:-1]+"}"


	import datetime
	dt = datetime.datetime.now()

	# Header
	code = f"// Autogenerated sequence file generated on {str(dt)}.\n\n"


	#Add header
	#code += "#include <String.h>\n\n"

	# Meta Information
	#_________________


	# Diameter of syringe
	code += f'{specifiers} String UNITS_mL = "{config["units"]}";\n'

	#No of Samples
	code += f"{specifiers} unsigned int NO_SAMPLES = {config['no_samples']};\n"

	#Syrenge diameter
	code += f"{specifiers} float SYG_DIA_mL = {config['syringe_dia_mL']};\n"

	

	# Recurring sequence (One fixed schedule on loop)
	bool_val = (config["repeat"] == True)*'true' + (config["repeat"] == False)*'false'
	code += f"{specifiers} bool DO_REPEAT = {bool_val};\n"


	#No of Sequences
	no_sequences = len(config["sequences"])
	code += f"{specifiers} unsigned int NO_SEQUENCES = {no_sequences};\n"

	# Write Schedule arrays
	seq = config["sequences"].copy()
	for key in seq:
		code += f"{specifiers} float {key.upper()}[{config['no_samples']}] = {list_to_cpp_array(seq[key])};\n"


	# A ref array of all schedules
	seq_list = list(seq.keys())
	seq_list = [key.upper() for key in seq_list]

	seq_str = "{"+str(seq_list)[1:-1]+"}"
	code += f"{specifiers} float* SEQ_LIST[{no_sequences}] = {list_to_cpp_array(seq_list)};"

	# Footer
	code += "\n\n// Autogenerated Sequence file ends here."


	write_cpp(cpp_file_path ,code)




def csv_to_dict(filename, syringe_dia_mL=20):
	"""
	Convert CSV file to python dictionar.
	"""

	# Open CSV and load into dictionary
	from csv import reader
	from pandas import read_csv
	csv_df = read_csv(filename, dtype=float)
	csv_dict = csv_df.to_dict('list') #Convert data frame to dictionary where each column is a list and column header is the key


	print("\nSequence file:\n", csv_df, "\n")
	# any(seq_path.endswith(ext) for ext in [".json", ".yml", ".yaml"])
	sequences = [seq for seq in csv_dict.keys() if ("sequence" in seq) or ("repeat" in seq)]

	
	# Verify validity of sequences
	if len(sequences) == 0:
		raise Exception("No sequence detected in file!")

	if len(sequences) > 1 and "repeat" in sequences:
		raise Exception("repeat sequence passed with other sequences!")

	# Check that all the sequences have the same length
	sample_no_list = [len(csv_dict[seq]) for seq in sequences]
	if any(sample != sample_no_list[0] for sample in sample_no_list):
		raise Exception("Sequences have unequal lengths!")

	print(f"Read sequences [{len(sequences)}]: {sequences}.")

	config = {}

	# Repeat one sequence repeatedly
	if "repeat" in sequences:
		print("Processing repeat sequence...")
		config["units"] =  "mL"
		config["syringe_dia_mL"] =  syringe_dia_mL
		config["no_samples"] =  sample_no_list[0]
		config["repeat"] =  True
		config["sequences"] =  {sch: csv_dict[sch] for sch in sequences}

	else:
		# Check if sequences are present
		if len(sequences) > 1:
			print("Processing multiple sequences...")
		else:
			print("Processing single sequence...")

		seqs = [key for key in sequences if ("sequence" in key)]

		config["units"] =  "mL"
		config["syringe_dia_mL"] =  syringe_dia_mL
		config["no_samples"] =  sample_no_list[0]
		config["repeat"] =  False
		config["sequences"] =  {sch: csv_dict[sch] for sch in seqs}

	return config




